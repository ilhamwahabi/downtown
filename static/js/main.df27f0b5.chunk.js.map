{"version":3,"sources":["components/Content/Main.tsx","components/Content/index.tsx","components/Footer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","StyleSheet","create","buttonRow","width","marginTop","Main","react_default","a","createElement","Fragment","row","className","css","col","es_button","type","size","block","Content","components_Content","content","Content_Main","flex","backgroundColor","display","flexDirection","justifyContent","alignItems","Footer","components_Footer","footer","href","link","target","rel","icon","textAlign","color","layout","height","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6MAkBMA,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,MAAO,MACPC,UAAW,UAIAC,EArBF,WACX,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAAE,EAAA,GAAKC,UAAWC,YAAIb,EAAOG,YACzBI,EAAAC,EAAAC,cAAAK,EAAA,OACEP,EAAAC,EAAAC,cAAAM,EAAA,GAAQC,KAAK,UAAUC,KAAK,QAAQC,OAAK,GAAzC,aCHFC,cAEOC,EAAA,WACb,OACEb,EAAAC,EAAAC,cAACU,EAAD,CAASP,UAAWC,YAAIb,EAAOqB,UAC7Bd,EAAAC,EAAAC,cAACa,EAAD,QAKAtB,EAASC,IAAWC,OAAO,CAC/BmB,QAAS,CACPE,KAAM,EACNC,gBAAiB,QACjBC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,4BCnBRC,aAEOC,EAAA,WACb,OACEvB,EAAAC,EAAAC,cAACoB,EAAD,CAAQjB,UAAWC,YAAIb,EAAO+B,SAC5BxB,EAAAC,EAAAC,cAAA,KACEuB,KAAK,mCACLpB,UAAWC,YAAIb,EAAOiC,MACtBC,OAAO,SACPC,IAAI,uBAJN,YAMW5B,EAAAC,EAAAC,cAAA2B,EAAA,GAAMpB,KAAK,cANtB,wBAYAhB,EAASC,IAAWC,OAAO,CAC/B6B,OAAQ,CACNP,gBAAiB,QACjBa,UAAW,UAEbJ,KAAM,CACJK,MAAO,aCXLtC,EAASC,IAAWC,OAAO,CAC/BqC,OAAQ,CACNC,OAAQ,WAIGC,EAfO,WACpB,OACElC,EAAAC,EAAAC,cAAA8B,EAAA,GAAQ3B,UAAWC,YAAIb,EAAOuC,SAC5BhC,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACqB,EAAD,QCCAY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCnGjEC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDsB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACnBC,YACD9B,OAAOC,SAASb,MAEJ2C,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMH,YAAN,sBAEPhC,GAgEV,SAAiCO,EAAeC,GAE9C4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCpD/BE","file":"static/js/main.df27f0b5.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { Row, Col, Button } from \"antd\";\n\nconst Main = () => {\n  return (\n    <>\n      <Row className={css(styles.buttonRow)}>\n        <Col>\n          <Button type=\"primary\" size=\"large\" block>\n            Start\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    width: \"10%\",\n    marginTop: \"75px\"\n  }\n});\n\nexport default Main;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { Layout } from \"antd\";\n\nimport Main from \"./Main\";\n\nconst { Content } = Layout;\n\nexport default () => {\n  return (\n    <Content className={css(styles.content)}>\n      <Main />\n    </Content>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { Layout, Icon } from \"antd\";\n\nconst { Footer } = Layout;\n\nexport default () => {\n  return (\n    <Footer className={css(styles.footer)}>\n      <a\n        href=\"https://github.com/iwgx/downtown\"\n        className={css(styles.link)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Downtown <Icon type=\"copyright\" /> 2019 Ilham Wahabi\n      </a>\n    </Footer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  footer: {\n    backgroundColor: \"white\",\n    textAlign: \"center\"\n  },\n  link: {\n    color: \"inherit\"\n  }\n});\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { Layout } from \"antd\";\n\nimport Content from \"./Content\";\nimport Footer from \"./Footer\";\n\nconst App: React.FC = () => {\n  return (\n    <Layout className={css(styles.layout)}>\n      <Content />\n      <Footer />\n    </Layout>\n  );\n};\n\nconst styles = StyleSheet.create({\n  layout: {\n    height: \"100vh\"\n  }\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}